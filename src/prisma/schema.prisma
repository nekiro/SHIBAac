generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model aac_news {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  title      String   @db.VarChar(255)
  content    String   @db.LongText
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  authorId   Int      @db.UnsignedInt
  playerNick String?  @db.VarChar(255)
  imageUrl   String?  @db.VarChar(255)
  playersId  Int?     @db.UnsignedInt

  @@index([authorId], map: "idx_authorId")
}

model account_ban_history {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  account_id Int
  reason     String   @db.VarChar(255)
  banned_at  BigInt
  expired_at BigInt
  banned_by  Int
  accounts   accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, map: "account_ban_history_ibfk_1")
  players    players  @relation(fields: [banned_by], references: [id], onDelete: Cascade, map: "account_ban_history_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([banned_by], map: "banned_by")
}

model account_bans {
  account_id Int      @id
  reason     String   @db.VarChar(255)
  banned_at  BigInt
  expires_at BigInt
  banned_by  Int
  accounts   accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, map: "account_bans_ibfk_1")
  players    players  @relation(fields: [banned_by], references: [id], onDelete: Cascade, map: "account_bans_ibfk_2")

  @@index([banned_by], map: "banned_by")
}

model account_storage {
  account_id Int
  key        Int      @db.UnsignedInt
  value      Int
  accounts   accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "account_storage_ibfk_1")

  @@id([account_id, key])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model account_viplist {
  account_id  Int
  player_id   Int
  description String   @default("") @db.VarChar(128)
  icon        Int      @default(0) @db.UnsignedTinyInt
  notify      Int      @default(0) @db.TinyInt
  accounts    accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "account_viplist_ibfk_1")
  players     players  @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "account_viplist_ibfk_2")

  @@unique([account_id, player_id], map: "account_player_index")
  @@index([player_id], map: "player_id")
}

model accounts {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique(map: "name") @db.VarChar(32)
  password            String                @db.Char(40)
  secret              String?               @db.Char(16)
  type                Int                   @default(1)
  premium_ends_at     Int                   @default(0) @db.UnsignedInt
  email               String                @default("") @db.VarChar(255)
  creation            Int                   @default(0)
  rec_key             String?               @unique(map: "accounts_rec_key_unique") @db.VarChar(255)
  twoFASecret         String?               @db.VarChar(255)
  twoFAEnabled        Boolean               @default(false)
  coins               Int?
  account_ban_history account_ban_history[]
  account_bans        account_bans?
  account_storage     account_storage[]
  account_viplist     account_viplist[]
  players             players[]
  sessions            sessions[]
}

model bazar_bids {
  id               Int             @id @default(autoincrement())
  bidderAccountId  Int?
  bidderPlayerName String?         @db.VarChar(255)
  amount           Int?
  bazarListingId   Int?
  createdAt        DateTime?       @default(now()) @db.DateTime(0)
  bazar_listings   bazar_listings? @relation(fields: [bazarListingId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_BazarBids_bazarListingId")

  @@index([bazarListingId], map: "idx_BazarBids_bazarListingId")
  @@index([bidderAccountId], map: "idx_BazarBids_bidderId")
}

model bazar_listings {
  id             Int          @id @default(autoincrement())
  playerId       Int?         @unique(map: "playerId")
  name           String?      @db.VarChar(255)
  level          Int?
  vocation       Int?
  characterPage  String?      @db.VarChar(255)
  highlight      Boolean?
  country        String?      @db.VarChar(255)
  world          Int?
  pvpType        String?      @db.VarChar(255)
  battlEyeStatus String?      @db.VarChar(255)
  remainingTime  String?      @db.VarChar(255)
  endingAt       String?      @db.VarChar(255)
  coins          Int?
  equipedItems   String?      @db.LongText
  skills         String?      @db.LongText
  quests         String?      @db.LongText
  charms         String?      @db.LongText
  extras         String?      @db.LongText
  oldAccountId   Int?
  bazar_bids     bazar_bids[]
  players        players?     @relation(fields: [playerId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_bazarListings_playerId")

  @@index([playerId], map: "idx_bazarListings_playerId")
}

model guild_invites {
  player_id Int     @default(0)
  guild_id  Int     @default(0)
  players   players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "guild_invites_ibfk_1")
  guilds    guilds  @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "guild_invites_ibfk_2")

  @@id([player_id, guild_id])
  @@index([guild_id], map: "guild_id")
}

model guild_membership {
  player_id   Int         @id
  guild_id    Int
  rank_id     Int
  nick        String      @default("") @db.VarChar(15)
  players     players     @relation(fields: [player_id], references: [id], onDelete: Cascade, map: "guild_membership_ibfk_1")
  guilds      guilds      @relation(fields: [guild_id], references: [id], onDelete: Cascade, map: "guild_membership_ibfk_2")
  guild_ranks guild_ranks @relation(fields: [rank_id], references: [id], onDelete: Cascade, map: "guild_membership_ibfk_3")

  @@index([guild_id], map: "guild_id")
  @@index([rank_id], map: "rank_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model guild_ranks {
  id               Int                @id @default(autoincrement())
  guild_id         Int
  name             String             @db.VarChar(255)
  level            Int
  guild_membership guild_membership[]
  guilds           guilds             @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "guild_ranks_ibfk_1")

  @@index([guild_id], map: "guild_id")
}

model guild_wars {
  id             Int              @id @default(autoincrement())
  guild1         Int              @default(0)
  guild2         Int              @default(0)
  name1          String           @db.VarChar(255)
  name2          String           @db.VarChar(255)
  status         Int              @default(0) @db.TinyInt
  started        BigInt           @default(0)
  ended          BigInt           @default(0)
  guildwar_kills guildwar_kills[]

  @@index([guild1], map: "guild1")
  @@index([guild2], map: "guild2")
}

model guilds {
  id               Int                @id @default(autoincrement())
  name             String             @unique(map: "name") @db.VarChar(255)
  ownerid          Int                @unique(map: "ownerid")
  creationdata     Int
  motd             String             @default("") @db.VarChar(255)
  banner_url       String?            @db.VarChar(255)
  guild_invites    guild_invites[]
  guild_membership guild_membership[]
  guild_ranks      guild_ranks[]
  players          players            @relation(fields: [ownerid], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "guilds_ibfk_1")
}

model guildwar_kills {
  id          Int        @id @default(autoincrement())
  killer      String     @db.VarChar(50)
  target      String     @db.VarChar(50)
  killerguild Int        @default(0)
  targetguild Int        @default(0)
  warid       Int        @default(0)
  time        BigInt
  guild_wars  guild_wars @relation(fields: [warid], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "guildwar_kills_ibfk_1")

  @@index([warid], map: "warid")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model house_lists {
  house_id Int
  listid   Int
  list     String @db.Text
  houses   houses @relation(fields: [house_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "house_lists_ibfk_1")

  @@index([house_id], map: "house_id")
  @@ignore
}

model houses {
  id             Int           @id @default(autoincrement())
  owner          Int
  paid           Int           @default(0) @db.UnsignedInt
  warnings       Int           @default(0)
  name           String        @db.VarChar(255)
  rent           Int           @default(0)
  town_id        Int           @default(0)
  bid            Int           @default(0)
  bid_end        Int           @default(0)
  last_bid       Int           @default(0)
  highest_bidder Int           @default(0)
  size           Int           @default(0)
  beds           Int           @default(0)
  house_lists    house_lists[] @ignore
  tile_store     tile_store[]  @ignore

  @@index([owner], map: "owner")
  @@index([town_id], map: "town_id")
}

model ip_bans {
  ip         Bytes   @id @db.VarBinary(16)
  reason     String  @db.VarChar(255)
  banned_at  BigInt
  expires_at BigInt
  banned_by  Int
  players    players @relation(fields: [banned_by], references: [id], onDelete: Cascade, map: "ip_bans_ibfk_1")

  @@index([banned_by], map: "banned_by")
}

model market_history {
  id         Int     @id @default(autoincrement()) @db.UnsignedInt
  player_id  Int
  sale       Int     @default(0) @db.TinyInt
  itemtype   Int     @db.UnsignedSmallInt
  amount     Int     @db.UnsignedSmallInt
  price      BigInt  @default(0) @db.UnsignedBigInt
  expires_at BigInt  @db.UnsignedBigInt
  inserted   BigInt  @db.UnsignedBigInt
  state      Int     @db.UnsignedTinyInt
  players    players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "market_history_ibfk_1")

  @@index([player_id, sale], map: "player_id")
}

model market_offers {
  id        Int     @id @default(autoincrement()) @db.UnsignedInt
  player_id Int
  sale      Int     @default(0) @db.TinyInt
  itemtype  Int     @db.UnsignedSmallInt
  amount    Int     @db.UnsignedSmallInt
  created   BigInt  @db.UnsignedBigInt
  anonymous Int     @default(0) @db.TinyInt
  price     BigInt  @default(0) @db.UnsignedBigInt
  players   players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "market_offers_ibfk_1")

  @@index([created], map: "created")
  @@index([player_id], map: "player_id")
  @@index([sale, itemtype], map: "sale")
}

model player_charms {
  id               Int      @id @default(autoincrement())
  player_guid      Int
  charm_points     String?  @db.VarChar(250)
  charm_expansion  Boolean?
  rune_wound       Int?
  rune_enflame     Int?
  rune_poison      Int?
  rune_freeze      Int?
  rune_zap         Int?
  rune_curse       Int?
  rune_cripple     Int?
  rune_parry       Int?
  rune_dodge       Int?
  rune_adrenaline  Int?
  rune_numb        Int?
  rune_cleanse     Int?
  rune_bless       Int?
  rune_scavenge    Int?
  rune_gut         Int?
  rune_low_blow    Int?
  rune_divine      Int?
  rune_vamp        Int?
  rune_void        Int?
  UsedRunesBit     String?  @db.VarChar(250)
  UnlockedRunesBit String?  @db.VarChar(250)
  tracker_list     Bytes?   @map("tracker list") @db.Blob
}

model player_deaths {
  player_id              Int
  time                   BigInt  @default(0) @db.UnsignedBigInt
  level                  Int     @default(1)
  killed_by              String  @db.VarChar(255)
  is_player              Int     @default(1) @db.TinyInt
  mostdamage_by          String  @db.VarChar(100)
  mostdamage_is_player   Int     @default(0) @db.TinyInt
  unjustified            Int     @default(0) @db.TinyInt
  mostdamage_unjustified Int     @default(0) @db.TinyInt
  id                     Int     @id @default(autoincrement())
  players                players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "player_deaths_ibfk_1")

  @@index([killed_by], map: "killed_by")
  @@index([mostdamage_by], map: "mostdamage_by")
  @@index([player_id], map: "player_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model player_depotitems {
  player_id  Int
  sid        Int
  pid        Int     @default(0)
  itemtype   Int     @db.UnsignedSmallInt
  count      Int     @default(0) @db.SmallInt
  attributes Bytes   @db.Blob
  players    players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "player_depotitems_ibfk_1")

  @@unique([player_id, sid], map: "player_id_2")
}

model player_inboxitems {
  player_id  Int
  sid        Int
  pid        Int     @default(0)
  itemtype   Int     @db.UnsignedSmallInt
  count      Int     @default(0) @db.SmallInt
  attributes Bytes   @db.Blob
  players    players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "player_inboxitems_ibfk_1")

  @@unique([player_id, sid], map: "player_id_2")
}

model player_items {
  player_id  Int     @default(0)
  pid        Int     @default(0)
  sid        Int     @default(0)
  itemtype   Int     @default(0) @db.UnsignedSmallInt
  count      Int     @default(0) @db.SmallInt
  attributes Bytes   @db.Blob
  id         Int     @id @default(autoincrement())
  players    players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "player_items_ibfk_1")

  @@index([player_id], map: "player_id")
  @@index([sid], map: "sid")
}

model player_mounts {
  player_id Int     @default(0)
  mount_id  Int     @default(0) @db.UnsignedSmallInt
  players   players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "player_mounts_ibfk_1")

  @@id([player_id, mount_id])
}

model player_namelocks {
  player_id                                       Int     @id
  reason                                          String  @db.VarChar(255)
  namelocked_at                                   BigInt
  namelocked_by                                   Int
  players_player_namelocks_player_idToplayers     players @relation("player_namelocks_player_idToplayers", fields: [player_id], references: [id], onDelete: Cascade, map: "player_namelocks_ibfk_1")
  players_player_namelocks_namelocked_byToplayers players @relation("player_namelocks_namelocked_byToplayers", fields: [namelocked_by], references: [id], onDelete: Cascade, map: "player_namelocks_ibfk_2")

  @@index([namelocked_by], map: "namelocked_by")
}

model player_outfits {
  player_id Int     @default(0)
  outfit_id Int     @default(0) @db.UnsignedSmallInt
  addons    Int     @default(0) @db.UnsignedTinyInt
  players   players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "player_outfits_ibfk_1")

  @@id([player_id, outfit_id])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model player_spells {
  player_id Int
  name      String  @db.VarChar(255)
  players   players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "player_spells_ibfk_1")

  @@index([player_id], map: "player_id")
  @@ignore
}

model player_storage {
  player_id Int     @default(0)
  key       Int     @default(0) @db.UnsignedInt
  value     Int     @default(0)
  players   players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "player_storage_ibfk_1")

  @@id([player_id, key])
}

model player_storeinboxitems {
  player_id  Int
  sid        Int
  pid        Int     @default(0)
  itemtype   Int     @db.UnsignedSmallInt
  count      Int     @default(0) @db.SmallInt
  attributes Bytes   @db.Blob
  players    players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "player_storeinboxitems_ibfk_1")

  @@unique([player_id, sid], map: "player_id_2")
}

model players {
  id                                                       Int                      @id @default(autoincrement())
  name                                                     String                   @unique(map: "name") @db.VarChar(255)
  group_id                                                 Int                      @default(1)
  account_id                                               Int                      @default(0)
  level                                                    Int                      @default(1)
  vocation                                                 Int                      @default(0)
  health                                                   Int                      @default(150)
  healthmax                                                Int                      @default(150)
  experience                                               BigInt                   @default(0) @db.UnsignedBigInt
  lookbody                                                 Int                      @default(0)
  lookfeet                                                 Int                      @default(0)
  lookhead                                                 Int                      @default(0)
  looklegs                                                 Int                      @default(0)
  looktype                                                 Int                      @default(136)
  lookaddons                                               Int                      @default(0)
  lookmount                                                Int                      @default(0)
  lookmounthead                                            Int                      @default(0)
  lookmountbody                                            Int                      @default(0)
  lookmountlegs                                            Int                      @default(0)
  lookmountfeet                                            Int                      @default(0)
  currentmount                                             Int                      @default(0) @db.UnsignedSmallInt
  randomizemount                                           Int                      @default(0) @db.TinyInt
  direction                                                Int                      @default(2) @db.UnsignedTinyInt
  maglevel                                                 Int                      @default(0)
  mana                                                     Int                      @default(0)
  manamax                                                  Int                      @default(0)
  manaspent                                                BigInt                   @default(0) @db.UnsignedBigInt
  soul                                                     Int                      @default(0) @db.UnsignedInt
  town_id                                                  Int                      @default(1)
  posx                                                     Int                      @default(0)
  posy                                                     Int                      @default(0)
  posz                                                     Int                      @default(0)
  conditions                                               Bytes?                   @db.Blob
  cap                                                      Int                      @default(400)
  sex                                                      Int                      @default(0)
  lastlogin                                                BigInt                   @default(0) @db.UnsignedBigInt
  lastip                                                   Bytes                    @default(dbgenerated("('0')")) @db.VarBinary(16)
  save                                                     Int                      @default(1) @db.TinyInt
  skull                                                    Int                      @default(0) @db.TinyInt
  skulltime                                                BigInt                   @default(0)
  lastlogout                                               BigInt                   @default(0) @db.UnsignedBigInt
  blessings                                                Int                      @default(0) @db.TinyInt
  onlinetime                                               BigInt                   @default(0)
  deletion                                                 BigInt                   @default(0)
  balance                                                  BigInt                   @default(0) @db.UnsignedBigInt
  offlinetraining_time                                     Int                      @default(43200) @db.UnsignedSmallInt
  offlinetraining_skill                                    Int                      @default(-1)
  stamina                                                  Int                      @default(2520) @db.UnsignedSmallInt
  skill_fist                                               Int                      @default(10) @db.UnsignedInt
  skill_fist_tries                                         BigInt                   @default(0) @db.UnsignedBigInt
  skill_club                                               Int                      @default(10) @db.UnsignedInt
  skill_club_tries                                         BigInt                   @default(0) @db.UnsignedBigInt
  skill_sword                                              Int                      @default(10) @db.UnsignedInt
  skill_sword_tries                                        BigInt                   @default(0) @db.UnsignedBigInt
  skill_axe                                                Int                      @default(10) @db.UnsignedInt
  skill_axe_tries                                          BigInt                   @default(0) @db.UnsignedBigInt
  skill_dist                                               Int                      @default(10) @db.UnsignedInt
  skill_dist_tries                                         BigInt                   @default(0) @db.UnsignedBigInt
  skill_shielding                                          Int                      @default(10) @db.UnsignedInt
  skill_shielding_tries                                    BigInt                   @default(0) @db.UnsignedBigInt
  skill_fishing                                            Int                      @default(10) @db.UnsignedInt
  skill_fishing_tries                                      BigInt                   @default(0) @db.UnsignedBigInt
  account_ban_history                                      account_ban_history[]
  account_bans                                             account_bans[]
  account_viplist                                          account_viplist[]
  bazar_listings                                           bazar_listings?
  guild_invites                                            guild_invites[]
  guild_membership                                         guild_membership?
  guilds                                                   guilds?
  ip_bans                                                  ip_bans[]
  market_history                                           market_history[]
  market_offers                                            market_offers[]
  player_deaths                                            player_deaths[]
  player_depotitems                                        player_depotitems[]
  player_inboxitems                                        player_inboxitems[]
  player_items                                             player_items[]
  player_mounts                                            player_mounts[]
  player_namelocks_player_namelocks_player_idToplayers     player_namelocks?        @relation("player_namelocks_player_idToplayers")
  player_namelocks_player_namelocks_namelocked_byToplayers player_namelocks[]       @relation("player_namelocks_namelocked_byToplayers")
  player_outfits                                           player_outfits[]
  player_spells                                            player_spells[]          @ignore
  player_storage                                           player_storage[]
  player_storeinboxitems                                   player_storeinboxitems[]
  accounts                                                 accounts                 @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "players_ibfk_1")

  @@index([account_id], map: "account_id")
  @@index([vocation], map: "vocation")
}

model players_online {
  player_id Int @id
}

model server_config {
  config String @id @db.VarChar(50)
  value  String @default("") @db.VarChar(256)
}

model sessions {
  id         Int       @id @default(autoincrement())
  token      Bytes     @unique(map: "token") @db.Binary(16)
  account_id Int
  ip         Bytes     @db.VarBinary(16)
  created_at DateTime  @default(now()) @db.Timestamp(0)
  expired_at DateTime? @db.Timestamp(0)
  accounts   accounts  @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "sessions_ibfk_1")

  @@index([account_id], map: "account_id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model tile_store {
  house_id Int
  data     Bytes
  houses   houses @relation(fields: [house_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tile_store_ibfk_1")

  @@index([house_id], map: "house_id")
  @@ignore
}

model towns {
  id   Int    @id @default(autoincrement())
  name String @unique(map: "name") @db.VarChar(255)
  posx Int    @default(0)
  posy Int    @default(0)
  posz Int    @default(0)
}
